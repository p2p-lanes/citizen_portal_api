version: '3.8'
services:
  nocodb:
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NC_DB: "pg://postgres:${DB_PORT}?u=${DB_USERNAME}&p=${DB_PASSWORD}&d=${NOCO_DB_NAME}"
    image: "nocodb/nocodb:latest"
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - "nc_data:/usr/app/data"
    env_file:
      - .env

  api:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    command: "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

  send_scheduled_emails:
    build: .
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    command: "python app/processes/send_scheduled_emails.py"
    restart: always

  send_reminder_emails:
    build: .
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    command: "python app/processes/send_reminder_emails.py"
    restart: always

  auto_approval:
    build: .
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    command: "python app/processes/auto_approval.py"
    restart: always

  check_in_emails:
    build: .
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    command: "python app/processes/check_in_emails.py"
    restart: always

  postgres:
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 10
      test: "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"
      timeout: 2s
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - "db_data:/var/lib/postgresql/data"
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  db_data: {}
  nc_data: {}
